package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"log/slog"

	gqlconv "github.com/elusiv0/oz_task/internal/converter/gql"
	model "github.com/elusiv0/oz_task/internal/dto"
	"github.com/elusiv0/oz_task/internal/graph"
	gqlmiddleware "github.com/elusiv0/oz_task/internal/graph/middleware"
	"github.com/elusiv0/oz_task/internal/middleware"
)

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, first *int, after *int) (*graph.CommentConnection, error) {
	logger := r.logger.With(slog.String("request_id", middleware.GetUuid(ctx)))

	logger.Debug("wrapping comment request to dto...")
	commentsReq := gqlconv.ToGetCommentsRequest(
		gqlconv.WithCommentsPagination(*first, after),
		gqlconv.WithPostId(&obj.ID),
	)

	logger.Debug("calling comment service...")
	commentsResp, err := gqlmiddleware.GetCommentLoader(ctx).Load(commentsReq)
	if err != nil {
		r.logger.Warn("Error was handled", slog.String("Cause", "PostResolver - Comments: "+err.Error()))
		gqlErr := handleError(ctx, err)
		return &graph.CommentConnection{}, gqlErr
	}

	logger.Debug("converting comment response to post connection...")
	commentConn := gqlconv.ToCommentConnection(commentsResp, commentsReq.First, commentsReq.After)

	return commentConn, nil
}

// CreateComment is the resolver for the createComment field.
func (r *postResolver) CreateComment(ctx context.Context, obj *model.Post, input model.NewComment) (*model.Comment, error) {
	if obj.Closed {
		err := model.NewCustomError(PostClosedErr, nil)
		r.logger.Warn("Error was handled", slog.String("Cause", "PostResolver - Comments: "+err.Error()))
		gqlErr := handleError(ctx, err)
		return &model.Comment{}, gqlErr
	}
	input.ArticleID = obj.ID
	logger := r.logger.With(slog.String("request_id", middleware.GetUuid(ctx)))

	logger.Debug("calling comment service...")
	commentResp, err := r.commentService.Insert(ctx, input)
	if err != nil {
		r.logger.Warn("Error was handled", slog.String("Cause", "mutationResolver - CreateComment: "+err.Error()))
		gqlErr := handleError(ctx, err)
		return commentResp, gqlErr
	}

	logger.Debug("sending comment response to subscribe channel...")
	for _, ch := range r.postsSubscribers[commentResp.ArticleID] {
		ch <- commentResp
	}

	return commentResp, nil
}

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
